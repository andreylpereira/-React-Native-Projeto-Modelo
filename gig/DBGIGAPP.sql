-- CREATE DATABASE DBGIGAPP;
-- USE DBGIGAPP;

-- CRIANDO TABELAS
CREATE TABLE ESTABELECIMENTO(
	IDESTABELECIMENTO SERIAL NOT NULL  PRIMARY KEY,
	NOME VARCHAR(30),
	EMAIL VARCHAR(40),
	SENHA VARCHAR(14),
	TELEFONE CHAR(11),
	CIDADE VARCHAR(30),
	ESTADO CHAR(2),
	COMPLEMENTO VARCHAR(50),
	NOTA INT,
	LATITUDE INT,
	LONGITUDE INT
);

CREATE TABLE BANDA(
	IDBANDA SERIAL NOT NULL PRIMARY KEY,
	NOME VARCHAR(30),
	EMAIL VARCHAR(40),
	SENHA VARCHAR(14),
	TELEFONE CHAR(11),
	ESTILOMUSICAL VARCHAR(20),
	DESCRICAO VARCHAR(100),
	NOTA INT,
	LATITUDE INT,
	LONGITUDE INT
);

CREATE TABLE EVENTO(
	IDEVENTO SERIAL NOT NULL PRIMARY KEY,
	IDESTABELECIMENTO INT REFERENCES ESTABELECIMENTO (IDESTABELECIMENTO),
	IDBANDA INT REFERENCES BANDA (IDBANDA),
	TITULO VARCHAR(30),
	DESCRICAO VARCHAR(100),
	DATA DATE,
	VALOR INT
);

CREATE TABLE USUARIO(
	IDUSUARIO SERIAL NOT NULL PRIMARY KEY,
	IDESTABELECIMENTO INT REFERENCES ESTABELECIMENTO(IDESTABELECIMENTO),
	IDBANDA INT REFERENCES BANDA (IDBANDA)
);

-- CRIANDO FUNÇÕES DE VALIDAÇÕES
CREATE OR REPLACE FUNCTION FN_VALIDA_ESTABELECIMENTO() 
RETURNS trigger LANGUAGE 'plpgsql'
AS $BODY$
BEGIN
	IF (TG_OP = 'INSERT') OR (TG_OP = 'UPDATE') THEN

		IF (length(NEW.NOME) = 0)OR(NEW.NOME IS NULL) THEN
			RAISE EXCEPTION 'O campo NOME deve ter pelo menos 1 caractere';
		ELSEIF (length(NEW.NOME) > 30) THEN
			RAISE EXCEPTION 'O campo NOME não pode ultrapassar 30 caracteres';
		END IF;
		
		IF (length(NEW.EMAIL) < 3)OR(NEW.EMAIL IS NULL) THEN
			RAISE EXCEPTION 'O campo EMAIL deve ter pelo menos 4 caracteres';
		ELSEIF (length(NEW.EMAIL) > 40) THEN
			RAISE EXCEPTION 'O campo EMAIL não pode ultrapassar 40 caracteres';
		END IF;
		
		IF (length(NEW.SENHA) < 6)OR(NEW.SENHA IS NULL) THEN
			RAISE EXCEPTION 'O campo SENHA deve ter pelo menos 6 caracteres';
		ELSEIF (length(NEW.SENHA) > 14) THEN
			RAISE EXCEPTION 'O campo SENHA não pode ultrapassar 14 caracteres';
		END IF;
		
		IF (NEW.NOTA > 10)OR(NEW.NOTA IS NULL) THEN
			RAISE EXCEPTION 'A NOTA deve estar entre 0 e 10';
		END IF;

	END IF;
	RETURN NEW;
END;
$BODY$;

CREATE OR REPLACE FUNCTION FN_VALIDA_BANDA() 
RETURNS trigger LANGUAGE 'plpgsql'
AS $BODY$
BEGIN
	IF (TG_OP = 'INSERT') OR (TG_OP = 'UPDATE') THEN

		IF (length(NEW.NOME) = 0)OR(NEW.NOME IS NULL) THEN
			RAISE EXCEPTION 'O campo NOME deve ter pelo menos 1 caractere';
		ELSEIF (length(NEW.NOME) > 30) THEN
			RAISE EXCEPTION 'O campo NOME não pode ultrapassar 30 caracteres';
		END IF;
		
		IF (length(NEW.EMAIL) < 3)OR(NEW.EMAIL IS NULL) THEN
			RAISE EXCEPTION 'O campo EMAIL deve ter pelo menos 4 caracteres';
		ELSEIF (length(NEW.EMAIL) > 40) THEN
			RAISE EXCEPTION 'O campo EMAIL não pode ultrapassar 40 caracteres';
		END IF;
		
		IF (length(NEW.SENHA) < 6)OR(NEW.SENHA IS NULL) THEN
			RAISE EXCEPTION 'O campo SENHA deve ter pelo menos 6 caracteres';
		ELSEIF (length(NEW.SENHA) > 14) THEN
			RAISE EXCEPTION 'O campo SENHA não pode ultrapassar 14 caracteres';
		END IF;
		
		IF (NEW.DESCRICAO IS NULL) THEN
			RAISE EXCEPTION 'Por favor nos conte um pouco sobre a sua história';
		END IF;
		
		IF (NEW.NOTA > 10)OR(NEW.NOTA IS NULL) THEN
			RAISE EXCEPTION 'A NOTA deve estar entre 0 e 10';
		END IF;

	END IF;
	RETURN NEW;
END;
$BODY$;

CREATE OR REPLACE FUNCTION FN_VALIDA_EVENTO() 
RETURNS trigger LANGUAGE 'plpgsql'
AS $BODY$
BEGIN
	IF (TG_OP = 'INSERT') OR (TG_OP = 'UPDATE') THEN

		IF (length(NEW.TITULO) = 0)OR(NEW.TITULO IS NULL) THEN
			RAISE EXCEPTION 'O campo TITULO deve ter pelo menos 1 caractere';
		ELSEIF (length(NEW.TITULO) > 30) THEN
			RAISE EXCEPTION 'O campo TITULO não pode ultrapassar 30 caracteres';
		END IF;

	END IF;
	RETURN NEW;
END;
$BODY$;

-- CRIANDO TRIGGERS QUE RECEBEM AS FUNÇÕES
CREATE TRIGGER TR_VALIDA_ESTABELECIMENTO
AFTER INSERT OR UPDATE OR DELETE ON ESTABELECIMENTO
FOR EACH ROW EXECUTE PROCEDURE FN_VALIDA_ESTABELECIMENTO();

CREATE TRIGGER TR_VALIDA_BANDA
AFTER INSERT OR UPDATE OR DELETE ON BANDA
FOR EACH ROW EXECUTE PROCEDURE FN_VALIDA_BANDA();

CREATE TRIGGER TR_VALIDA_EVENTO
AFTER INSERT OR UPDATE OR DELETE ON EVENTO
FOR EACH ROW EXECUTE PROCEDURE FN_VALIDA_EVENTO();